from PyQt_recipe_editor_mainwindow import Ui_MainWindow
from tablewidget import IngredientsTableWidget
from PyQt5 import QtCore, QtGui, QtWidgets
from ingredienttablewidget import IngredientsTableWidget

class RecipeEditorView(Ui_MainWindow):
    """ Recipe editor view 
    inherits from Ui_MainWindow generated by Qt Designer and implements custom Ingredient QTablewidget """

    database_model = None 

    def __init__(self, main_window):
        super().__init__()
        super().setupUi(main_window)

    def setup_UI(self, database_model):
        """ Sets up comboboxes in Recipe Editor View 
        
        args
            database_model (databasemodel): static offline data from database """

        self.database_model = database_model
        db = self.database_model 
        if self.database_model is not None: 
            self._set_ingredients_tablewidget(db.ingredient_categories, db.ingredient_functions)
            self.inpRecType.addItems(database_model.recipe_types)


    def _set_ingredients_tablewidget(self, ingredient_categories, ingredient_functions):
        """ Sets the custom Ingredient QTableWidget"""

        self.inpIngredients = IngredientsTableWidget(self.centralwidget, ingredient_functions, ingredient_categories)
        self.inpIngredients.setGeometry(QtCore.QRect(20, 330, 691, 192)) 
    
    def read_ingredients(self):
        """ returns ingredients (list): list of ingredients added in the view """
        ingredients = self.inpIngredients.get_ingredients()
        return ingredients
        
    # og saa videre.... her skal vaere kode til at samle QTableWidget og definere metoder som controlleren skal kunne kalde 

if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = RecipeEditorView(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())